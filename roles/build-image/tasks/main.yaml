- name: get list of isos
  set_fact:
    os_img: "{{windows_iso[os_version]| first}}"

- name: Create VM
  win_shell: | 
    New-VHD -Path {{OutputPath}}{{os_version}}{{os_edition}}.vhdx -Dynamic -SizeBytes 30GB | Out-Null
    New-VM -Name {{os_version}}{{os_edition}} -MemoryStartupBytes 2048MB -Generation 2 -SwitchName NATSwitch -VHDPath {{OutputPath}}{{os_version}}{{os_edition}}.vhdx | Out-Null
    Set-VM -Name {{os_version}}{{os_edition}} -ProcessorCount 4
    Add-VMDvdDrive -VMName {{os_version}}{{os_edition}} -ControllerNumber 0 -ControllerLocation 1 | Out-Null
    Set-VMDvdDrive -VMName {{os_version}}{{os_edition}} -ControllerNumber 0 -ControllerLocation 1 -Path {{ISOPath}}{{os_img}} | Out-Null
    Add-VMDvdDrive -VMName {{os_version}}{{os_edition}} -ControllerNumber 0 -ControllerLocation 2 | Out-Null
    Set-VMDvdDrive -VMName {{os_version}}{{os_edition}} -ControllerNumber 0 -ControllerLocation 2 -Path {{ISOSecondaryPath}}{{os_version}}{{os_edition}}\secondary.iso | Out-Null
    Start-VM {{os_version}}{{os_edition}} | ConvertTo-Json -Depth 1
  register: vm

- name: Wait 10 sec for VM to boot
  wait_for: timeout=10
  delegate_to: localhost

- name: Type boot command
  win_shell: | 
    $VMName = "{{os_version}}{{os_edition}}"
    $VMCS = Get-WmiObject -Namespace root\virtualization\v2 -Class Msvm_ComputerSystem -Filter “ElementName='$($VMName)'”
    $keyboard = $VMCS.GetRelated("Msvm_Keyboard")
    $keyboard.TypeKey(0x1B) | out-null
    sleep -Milliseconds 100
    $keyboard.TypeKey(0x0D) | out-null
    sleep -Seconds 1
    $keyboard.TypeKey(0x1B) | out-null
    sleep -Milliseconds 100
    $keyboard.TypeKey(0x0D) | out-null

- name: test
  debug:
    var: vm

- name: Get VM IP
  win_shell: (Get-VM {{os_version}}{{os_edition}} | Select -ExpandProperty NetworkAdapters | Select IPAddresses).IPAddresses[0]
  until: vmip.stdout.find("192.168.0") != -1
  retries: 30
  delay: 60
  register: vmip
  ignore_errors: true
- name: set fact
  set_fact:
    vm_ip: "{{ vmip.stdout_lines | first }}"
- name: VM IP
  debug: 
    msg: "ip: {{ vm_ip }}"

- name: Wait 60 sec for system to be ready
  wait_for: timeout=60
  delegate_to: localhost

- name: Running Windows Update... (Long Running)
  win_shell: |
     $secpasswd = ConvertTo-SecureString '{{AdministratorPassword}}' -AsPlainText -Force
     $cred = New-Object System.Management.Automation.PSCredential ("administrator", $secpasswd)
     Import-Module -Force {{PSModulePath}}RemoteWindowsUpdate.psm1
     Invoke-WindowsUpdate -ComputerName {{ vm_ip }} -AutoReboot -Cred $cred -LogPath "C:\{{os_version}}{{os_edition}}"
  until: winup.stdout.find("True") != -1
  retries: 30
  delay: 60
  register: winup
  ignore_errors: true
  become: yes
  become_method: runas
  vars:
    ansible_become_user: '{{ ansible_user }}'
    ansible_become_pass: '{{ ansible_password }}'

- name: Download & Install Cloudbase-init
  win_shell: |
    $secpasswd = ConvertTo-SecureString '{{AdministratorPassword}}' -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential ("administrator", $secpasswd)
    Import-Module -Force {{PSModulePath}}RemoteInstallSoftware.psm1
    Invoke-DownloadAndInstall -ComputerName {{ vm_ip }} -Credential $Cred -URL 'https://www.cloudbase.it/downloads/CloudbaseInitSetup_Stable_x64.msi' -OutPath C:\Windows\Temp\cloudbase.msi -ArgumentList '/i C:\Windows\Temp\cloudbase.msi /qn'
  become: yes
  become_method: runas
  vars:
    ansible_become_user: '{{ ansible_user }}'
    ansible_become_pass: '{{ ansible_password }}'

# Server 2016 fails on the first few runs, retry up to 5 times
- name: DISM with reset base
  win_shell: |
    $secpasswd = ConvertTo-SecureString '{{AdministratorPassword}}' -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential ("administrator", $secpasswd)
    Invoke-Command -ComputerName {{ vm_ip }} -Credential $Cred -ScriptBlock { DISM.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase }
  register: cleanup_result
  until: cleanup_result.rc == 0
  retries: 5
  delay: 1
  ignore_errors: yes
  become: yes
  become_method: runas
  vars:
    ansible_become_user: '{{ ansible_user }}'
    ansible_become_pass: '{{ ansible_password }}'



